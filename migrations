#!/bin/sh

set -e
set -o pipefail

if [ ! -z "$DEBUG" ]; then
  set -x
fi

SELF="`basename $0`"
SELF_HOME="`dirname $0`"
CURL='curl -sS --fail --compressed'
CURLJ="$CURL -H content-type:application/json"
CMDS='help run'
TEMP_DIR="$TMPDIR/medic-migrations"

usage () {
  cat <<EOT >&2

Usage: $SELF [command]

Description:
  
  Management interface for database migrations.

Commands:
  
  help  Print this information.

  run <path>
  
    Run or execute a migration package.  Requires a \`path\` parameter to
    the migration package.
        
    Basic steps of running a migration are:

      1) Install a ddoc and view on a database
      2) Backup the view data including docs
      3) Execute and save results from a script that updates the data
      4) Test to make sure view is empty, this means bad data was fixed
      5) Delete the migration ddoc
         
Environment Variables:

  COUCH_URL   The server URL to run against.
  TMPDIR      The directory to store results and backups in. Default is:
              '$TMPDIR/medic-migrations'.
  DEBUG       Set to true for verbose output.

Examples:
 
  COUCH_URL=http://admin:secret@localhost:5984 \\
  $SELF run ./resolve-contacts-on-data-records

EOT
  exit 1
}

# exit fatal
ef () {
  echo "" >&2
  echo "[$SELF Error]: $1" >&2
  echo "" >&2
  exit 1
}

# exit with usage
ewu () {
  echo "" >&2
  echo "[$SELF Error]: $1" >&2
  echo "" >&2
  usage
}

check_cmd () {
  local cmd="$1"
  if [ -z "$cmd" ]; then
    usage
  fi
  local t=1
  for i in `echo $CMDS`; do 
    if [ "$cmd" == "$i" ]; then
      t=0
    fi;
  done;
  if [ "$t" -eq 1 ]; then
    ewu "Command not found: $CMD"
  fi
}

info () {
  echo "\n$*" >&2
}

cleanup () {
  # if we find a ddoc with this name remove it
  local db="$1"
  local name="$2"
  local ddoc_url="$COUCH_URL/$db/_design/$name"
  $CURL --head "$ddoc_url" > /dev/null 2>&1 || return 0
  info "removing design doc..."
  local rev=`$CURL "$ddoc_url" | jq -r ._rev`
  $CURL -X DELETE "$ddoc_url?rev=$rev" > /dev/null
}

backup () {
  local db="$1"
  local name="$2"
  local ts=`date -u +%Y%m%dT%H%M%SZ`
  local file="$TEMP_DIR/$name-backup-$ts.json.gz"
  info "backing up view data to file $file"
  $CURL "$COUCH_URL/$db/_design/$name/_view/$name?include_docs=true" | \
    gzip > "$file"
}

help () {
  usage
}

run () {
  local dir="$1"
  local name=`basename $1`
  local ddoc="$dir/design-doc.json"
  local ts=`date -u +%Y%m%dT%H%M%SZ`
  local results="$TEMP_DIR/$name-results-$ts"
  local db=medic

  if [ -z $COUCH_URL ]; then
    ewu "Define COUCH_URL"
  fi

  if [ ! -d "$TEMP_DIR" ]; then
    mkdir "$TEMP_DIR"
  fi

  if [ ! -d "$dir" ]; then
    ewu "Directory not found: $dir"
  fi

  if [ -f "$dir/env" ]; then
    source "$dir/env";
    if [ -n $MIGRATION_DB ]; then
      db="$MIGRATION_DB"
    fi
    if [ -n $MIGRATION_NAME ]; then
      name="$MIGRATION_NAME"
    fi
  fi

  if [ ! -f "$ddoc" ]; then
    ef "Missing ddoc file: $ddoc";
  fi

  cleanup "$db" "$name"

  info "creating design doc from $ddoc"
  $CURLJ -d@"$ddoc" "$COUCH_URL/$db" > /dev/null

  backup "$db" "$name"

  info "updating data, saving results in $results"
  "$dir/update" | tee -a "$results"

  info "checking results..."
  for i in `cat "$results"`; do
    echo "$i" | jq  '.[] | select(.ok != true)';
  done

  info "testing if view is empty..."
  $CURL "$COUCH_URL/$db/_design/$name/_view/$name" | \
    head | grep 'total_rows":0,' > /dev/null

  cleanup "$db" "$name"

  info "run complete!"
}

main() {
  local cmd="$1"
  check_cmd "$cmd"
  shift 1
  $cmd $@
}

main "$@"
